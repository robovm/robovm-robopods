package: org.robovm.pods.parse
framework: Parse
include: [foundation, uikit, coregraphics, corelocation, storekit, ../../../../../bolts/ios/src/main/bro-gen/bolts.yaml]
clang_args: ['-x', 'objective-c']
headers: [Parse.h]
typedefs:
    PFBooleanResultBlock: '@Block PFSaveCallback'
    PFIntegerResultBlock: '@Block PFCountCallback'
    PFUserResultBlock: '@Block PFLogInCallback'
    PFDataResultBlock: '@Block PFGetDataCallback'
    PFDataStreamResultBlock: '@Block PFGetDataStreamCallback'
    PFProgressBlock: '@Block PFProgressCallback'
    PFConfigResultBlock: '@Block PFConfigCallback'
    PFGeoPointResultBlock: '@Block PFLocationCallback'
    PFArrayResultBlock: '@Block VoidBlock2<NSArray<?>, NSError>'
    PFObjectResultBlock: '@Block VoidBlock2<PFObject, NSError>'
    PFSetResultBlock: '@Block VoidBlock2<NSSet<?>, NSError>'
    PFStringResultBlock: '@Block VoidBlock2<String, NSError>'
    PFIdResultBlock: '@Block VoidBlock2<NSObject, NSError>'
    PFUserSessionUpgradeResultBlock: '@Block PFUserSessionUpgradeCallback'
    PFUserLogoutResultBlock: '@Block PFLogOutCallback'
    PFSessionResultBlock: '@Block PFGetCallback<PFSession>'
    PFPurchaseProductObservationBlock: '@Block PFProductObserver'
    PFFilePathResultBlock: '@Block PFGetFilePathCallback'

private_typedefs:
    'void (^)(NSString *, NSError *)': '@Block VoidBlock2<String, NSError>'
    'void (^)(id<ParseMutableClientConfiguration> _Nonnull)': '@Block VoidBlock1<ParseMutableClientConfiguration>'
    
enums:
    PFCachePolicy: {}
    PFLogLevel: {}
    PFErrorCode: {prefix: kPFError, suffix: Error, kPFScriptError: Script, kPFValidationError: Validation}
        
classes:
    PFError:
        extends: NSError

    Parse: # DONE
        methods:
            '+setApplicationId:clientKey:':
                name: initialize
            '+initializeWithConfiguration:':
                name: initialize
            '+currentConfiguration':
                property: true
            '+enableDataSharing.*':
                name: enableDataSharing
            '+applicationGroupIdentifierForDataSharing':
                property: true
            '+containingApplicationBundleIdentifierForDataSharing':
                property: true
            '+logLevel':
                property: true
            '+offlineMessagesEnabled:':
                exclude: true
            '+errorMessagesEnabled:':
                exclude: true
    ParseClientConfiguration: # DONE
        methods:
            '+configurationWithBlock:':
                name: create
                constructor: true
            '+new':
                exclude: true
    PFACL: # DONE
        properties:
            'publicReadAccess':
                getter: getPublicReadAccess
            'publicWriteAccess':
                getter: getPublicWriteAccess
        methods:
            '-getReadAccessForRole.*':
                name: getRoleReadAccess
            '-setReadAccess:forRole.*':
                name: setRoleReadAccess0
                visibility: private
            '-getWriteAccessForRole.*':
                name: getRoleWriteAccess
            '-setWriteAccess:forRole.*':
                name: setRoleWriteAccess0
                visibility: private
            '-setReadAccess.*':
                name: setReadAccess0
                visibility: private
            '-setWriteAccess.*':
                name: setWriteAccess0
                visibility: private
            '-getReadAccessFor.*':
                name: getReadAccess
            '-getWriteAccessFor.*':
                name: getWriteAccess
            '+ACL':
                exclude: true
            '+ACLWithUser:':
                name: create
                constructor: true
            '+setDefaultACL:withAccessForCurrentUser:':
                trim_after_first_colon: true
    PFAnalytics: # DONE
        methods:
            '+trackAppOpenedWithLaunchOptions:':
                name: trackAppOpened
                return_type: BFTask<Void>
                parameters:
                    launchOptions:
                        type: UIApplicationLaunchOptions
            '+trackAppOpenedWithLaunchOptionsInBackground:block:':
                name: trackAppOpenedInBackground
                parameters:
                    launchOptions:
                        type: UIApplicationLaunchOptions
            '+trackAppOpenedWithRemoteNotificationPayload:':
                name: trackAppOpened
                return_type: BFTask<Void>
                parameters:
                    userInfo:
                        type: UIRemoteNotification
            '+trackAppOpenedWithRemoteNotificationPayloadInBackground:block:':
                name: trackAppOpenedInBackground
                parameters:
                    userInfo:
                        type: UIRemoteNotification
            '+trackEventInBackground.*':
                trim_after_first_colon: true
            '+trackEvent.*':
                trim_after_first_colon: true
                return_type: BFTask<Void>
    PFAnonymousUtils: # DONE
        methods:
            '+logInInBackground':
                return_type: BFTask<PFUser>
            '+logInWithTarget:selector:':
                exclude: true # deprecated
            '+logInWith.*':
                name: logIn
            '+isLinkedWithUser:':
                name: isLinked
    PFCloud: # DONE
        methods:
            '+callFunction:withParameters:':
                exclude: true
                return_type: '<T extends NSObject> T'
            '+callFunction:withParameters:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends NSObject> T'
            '+callFunctionInBackground:withParameters:':
                trim_after_first_colon: true
                return_type: '<T extends NSObject> BFTask<T>'
            '+callFunctionInBackground:withParameters:block:':
                name: callFunctionInBackground0
                visibility: protected # generic block
                parameters:
                    block:
                        type: '@Block PFFunctionCallback<NSObject>'
            '+callFunctionInBackground:withParameters:target:selector:':
                exclude: true # deprecated
            '+callFunctionInBackground.*':
                trim_after_first_colon: true
    PFConfig: # DONE
        methods:
            '-objectForKey:':
                name: get
            '-objectForKeyedSubscript:':
                exclude: true
            '+currentConfig':
                property: true
            '+getConfig':
                exclude: true
            '+getConfig:':
                name: get
                throws: NSErrorException
            '+getConfigInBackground':
                name: getInBackground
                return_type: BFTask<PFConfig>
            '+getConfigInBackgroundWithBlock:':
                name: getInBackground
    PFFile: # DONE
        methods:
            '-save':
                exclude: true
            '-save:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-saveInBackground':
                return_type: BFTask<Void>
            '-saveInBackgroundWithProgressBlock:':
                name: saveInBackground
                return_type: BFTask<Void>
            '-saveInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-saveInBackground.*':
                name: saveInBackground
            '-getData':
                exclude: true
            '-getDataStream':
                exclude: true
            '-getData:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-getDataStream:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-getDataInBackground':
                return_type: BFTask<NSData>
            '-getDataInBackgroundWithProgressBlock:':
                name: getDataInBackground
                return_type: BFTask<NSData>
            '-getDataStreamInBackground':
                return_type: BFTask<NSInputStream>
            '-getDataStreamInBackgroundWithProgressBlock:':
                name: getDataStreamInBackground
                return_type: BFTask<NSInputStream>
            '-getDataDownloadStreamInBackground':
                return_type: BFTask<NSInputStream>
            '-getDataDownloadStreamInBackgroundWithProgressBlock:':
                name: getDataDownloadStreamInBackground
                return_type: BFTask<NSInputStream>
            '-getDataInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-getDataInBackground.*':
                name: getDataInBackground
            '-getDataStreamInBackground.*':
                name: getDataStreamInBackground
            '-getFilePathInBackground':
                return_type: BFTask<NSString>
            '-getFilePathInBackgroundWithProgressBlock:':
                name: getFilePathInBackground
                return_type: BFTask<NSString>
            '-getFilePathInBackgroundWithBlock.*':
                name: getFilePathInBackground
            '+new':
                exclude: true
            '+fileWithName:contentsAtPath:':
                exclude: true
            '+fileWithName:contentsAtPath:error:':
                name: create
                constructor: true
                throws: NSErrorException
            '+fileWithName:data:contentType:':
                exclude: true
            '+fileWithName:data:contentType:error:':
                name: create
                constructor: true
                throws: NSErrorException
            '+fileWith.*':
                name: create
                constructor: true
    PFGeoPoint: # DONE
        methods:
            '-distanceIn.*':
                trim_after_first_colon: true
            '+geoPoint':
                exclude: true
            '+geoPointForCurrentLocationInBackground:':
                name: getCurrentLocationInBackground
            '+geoPointWith.*':
                name: create
                constructor: true
    PFInstallation: # DONE
        properties:
            'channels':
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '-setDeviceTokenFromData:':
                name: setDeviceToken
            '+currentInstallation':
                property: true
            '+query':
                property: true
                return_type: PFQuery<PFInstallation>
    PFNetworkActivityIndicatorManager: # DONE
        methods:
            '+sharedManager':
                property: true
    PFObject: # DONE
        properties:
            'allKeys':
                getter: keys
                type: List<String>
                marshaler: NSArray.AsStringListMarshaler
        methods:
            '-initWithClassName:':
                name: init
            '-objectForKey:':
                name: get
            '-setObject:forKey:':
                name: put0
                visibility: private
            '-removeObjectForKey:':
                name: remove
            '-objectForKeyedSubscript:':
                exclude: true
            '-setObject:forKeyedSubscript:':
                exclude: true
            '-relationForKey:':
                name: getRelation
                return_type: '<T extends PFObject> PFRelation<T>'
            '-relationforKey:':
                exclude: true # deprecated
            '-revertObjectForKey:':
                name: revert
            '-addObject:forKey:':
                name: add0
                visibility: private
            '-addObjectsFromArray:forKey:':
                name: addAll0
                visibility: private
            '-addUniqueObject:forKey:':
                name: addUnique0
                visibility: private
            '-addUniqueObjectsFromArray:forKey:':
                name: addAllUnique0
                visibility: private
            '-removeObject:forKey:':
                name: remove0
                visibility: private
            '-removeObjectsInArray:forKey:':
                name: removeAll0
                visibility: private
            '-incrementKey:.*':
                name: increment
            '-save':
                exclude: true
            '-save:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-saveInBackground':
                return_type: BFTask<Void>
            '-saveInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-saveInBackgroundWith.*':
                name: saveInBackground
            '-saveEventually':
                return_type: BFTask<Void>
            '-saveEventually:':
                trim_after_first_colon: true
            '-refresh.*':
                exclude: true # deprecated
            '-fetch':
                exclude: true 
            '-fetch:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> T'
                throws: NSErrorException
            '-fetchIfNeeded':
                exclude: true
            '-fetchIfNeeded:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends PFObject> T'
            '-fetchInBackground':
                return_type: '<T extends PFObject> BFTask<T>'
            '-fetchInBackgroundWithBlock:':
                name: fetchInBackground0
                visibility: protected # generic block
                parameters:
                    block:
                        type: '@Block PFGetCallback<PFObject>'
            '-fetchInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-fetchInBackground.*':
                name: fetchInBackground
            '-fetchIfNeededInBackground':
                return_type: '<T extends PFObject> BFTask<T>'
            '-fetchIfNeededInBackgroundWithBlock:':
                name: fetchIfNeededInBackground0
                visibility: protected # generic block
                parameters:
                    block:
                        type: '@Block PFGetCallback<PFObject>'
            '-fetchIfNeededInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-fetchIfNeededInBackground.*':
                name: fetchIfNeededInBackground
            '-fetchFromLocalDatastore':
                exclude: true
            '-fetchFromLocalDatastore:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> T'
                throws: NSErrorException
            '-fetchFromLocalDatastoreInBackground':
                return_type: '<T extends PFObject> BFTask<T>'
            '-fetchFromLocalDatastoreInBackgroundWithBlock:':
                name: fetchFromLocalDatastoreInBackground0
                visibility: protected # generic block
                parameters:
                    block:
                        type: '@Block PFGetCallback<PFObject>'
            '-delete':
                exclude: true
            '-delete:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-deleteInBackground':
                return_type: BFTask<Void>
            '-deleteInBackgroundWithBlock:':
                name: deleteInBackground
                parameters:
                    block:
                        type: '@Block PFDeleteCallback'
            '-deleteInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-deleteInBackground.*':
                name: deleteInBackground
            '-deleteEventually':
                return_type: BFTask<Void>
            '-isDirtyForKey:':
                name: isDirty
            '-pin':
                exclude: true
            '-pin:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-pinWithName:':
                exclude: true
            '-pinWithName:error:':
                name: pin
                throws: NSErrorException
            '-pinInBackground':
                return_type: BFTask<Void>
            '-pinInBackgroundWithName:':
                name: pinInBackground
                return_type: BFTask<Void>
            '-pinInBackground.*':
                name: pinInBackground
            '-unpin':
                exclude: true
            '-unpin:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-unpinWithName:':
                exclude: true
            '-unpinWithName:error:':
                name: unpin
                throws: NSErrorException
            '-unpinInBackground':
                return_type: BFTask<Void>
            '-unpinInBackgroundWithName:':
                name: unpinInBackground
                return_type: BFTask<Void>
            '-unpinInBackground.*':
                name: unpinInBackground
            '+objectWithClassName:':
                name: create
            '+objectWithoutDataWithClassName:objectId:':
                name: createWithoutData
            '+objectWithClassName:dictionary:':
                name: create
            '+saveAll:':
                exclude: true
            '+saveAll:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends PFObject> boolean'
                parameters:
                    objects:
                        type: NSArray<T>
            '+saveAllInBackground:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> BFTask<Void>'
                parameters:
                    objects:
                        type: NSArray<T>
            '+saveAllInBackground:target:selector:':
                exclude: true # deprecated  
            '+saveAllInBackground.*':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> void'
                parameters:
                    objects:
                        type: NSArray<T>
            '+deleteAll:':
                exclude: true
            '+deleteAll:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends PFObject> boolean'
                parameters:
                    objects:
                        type: NSArray<T>
            '+deleteAllInBackground:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> BFTask<Void>'
                parameters:
                    objects:
                        type: NSArray<T>
            '+deleteAllInBackground:block:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> void'
                parameters:
                    block:
                        type: '@Block PFDeleteCallback'
            '+deleteAllInBackground:target:selector:':
                exclude: true # deprecated
            '+deleteAllInBackground.*':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> void'
                parameters:
                    objects:
                        type: NSArray<T>
            '+fetchAll:':
                exclude: true
            '+fetchAll:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends PFObject> void'
                parameters:
                    objects:
                        type: NSArray<T>
            '+fetchAllIfNeeded:':
                exclude: true
            '+fetchAllIfNeeded:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends PFObject> void'
                parameters:
                    objects:
                        type: NSArray<T>
            '+fetchAllInBackground:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> BFTask<NSArray<T>>'
                parameters:
                    objects:
                        type: NSArray<T>
            '+fetchAllInBackground:block:':
                name: fetchAllInBackground0
                return_type: '<T extends PFObject> void'
                visibility: protected # generic block
                parameters:
                    objects:
                        type: NSArray<T>
                    block:
                        type: '@Block PFFindCallback<PFObject>'
            '+fetchAllInBackground:target:selector:':
                exclude: true # deprecated
            '+fetchAllInBackground.*':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> void'
                parameters:
                    objects:
                        type: NSArray<T>
            '+fetchAllIfNeededInBackground:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> BFTask<NSArray<T>>'
                parameters:
                    objects:
                        type: NSArray<T> 
            '+fetchAllIfNeededInBackground:block:':
                name: fetchAllIfNeededInBackground0
                return_type: '<T extends PFObject> void'
                visibility: protected # generic block
                parameters:
                    objects:
                        type: NSArray<T>
                    block:
                        type: '@Block PFFindCallback<PFObject>'
            '+fetchAllIfNeededInBackground:target:selector:':
                exclude: true # deprecated
            '+fetchAllIfNeededInBackground.*':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> void'
                parameters:
                    objects:
                        type: NSArray<T>
            '+pinAll:':
                exclude: true
            '+pinAll:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends PFObject> boolean'
                parameters:
                    objects:
                        type: NSArray<T>
            '+pinAll:withName:':
                exclude: true
            '+pinAll:withName:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends PFObject> boolean'
                parameters:
                    objects:
                        type: NSArray<T>
            '+pinAllInBackground:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> BFTask<Void>'
                parameters:
                    objects:
                        type: NSArray<T>
            '+inAllInBackground:withName:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> BFTask<Void>'
                parameters:
                    objects:
                        type: NSArray<T>
            '+pinAllInBackground.*':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> void'
                parameters:
                    objects:
                        type: NSArray<T>
            '+unpinAllObjects':
                exclude: true
            '+unpinAllObjects:':
                name: unpinAll
                throws: NSErrorException
            '+unpinAllObjectsWithName:':
                exclude: true
            '+unpinAllObjectsWithName:error:':
                name: unpinAll
                throws: NSErrorException
            '+unpinAllObjectsInBackground':
                name: unpinAllInBackground
                return_type: BFTask<Void>
            '+unpinAllObjectsInBackgroundWithName:':
                name: unpinAllInBackground
                return_type: BFTask<Void>
            '+unpinAllObjectsInBackground.*':
                name: unpinAllInBackground
            '+unpinAll:':
                exclude: true
            '+unpinAll:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends PFObject> boolean'
                parameters:
                    objects:
                        type: NSArray<T>
            '+unpinAll:withName:':
                exclude: true
            '+unpinAll:withName:error:':
                trim_after_first_colon: true
                throws: NSErrorException
                return_type: '<T extends PFObject> boolean'
                parameters:
                    objects:
                        type: NSArray<T>
            '+unpinAllInBackground:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> BFTask<Void>'
                parameters:
                    objects:
                        type: NSArray<T>
            '+unpinAllInBackground:withName:':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> BFTask<Void>'
                parameters:
                    objects:
                        type: NSArray<T>
            '+unpinAllInBackground.*':
                trim_after_first_colon: true
                return_type: '<T extends PFObject> void'
                parameters:
                    objects:
                        type: NSArray<T>
            '+object':
                exclude: true
            '+objectWithoutDataWithObjectId:':
                exclude: true
            '+registerSubclass':
                exclude: true
            '+query':
                exclude: true
            '+queryWithPredicate:':
                exclude: true
    PFProduct: {} # DONE
    PFPurchase: # DONE
        methods:
            '+addObserverForProduct:block:':
                name: addProductObserver
            '+buyProduct:block:':
                trim_after_first_colon: true
                parameters:
                    block:
                        type: '@Block PFProductPurchaseCallback'
            '+downloadAssetForTransaction:completion.*':
                name: downloadAsset
                parameters:
                    completion:
                        type: '@Block PFAssetDownloadCallback'
            '+assetContentPathForProduct:':
                name: getAssetContentPath
    PFPush: # DONE
        methods:
            '-setChannels:':
                parameters:
                    channels:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-setQuery:':
                parameters:
                    query:
                        type: PFQuery<PFInstallation>
            '-expireAtDate:':
                name: setExpirationTime
            '-expireAfterTimeInterval:':
                name: setExpirationTimeInterval
            '-sendPush:':
                name: send
                throws: NSErrorException
            '-sendPushInBackground':
                name: sendInBackground
                return_type: BFTask<Void>
            '-sendPushInBackgroundWithBlock:':
                name: sendInBackground
                parameters:
                    block:
                        type: '@Block PFSendCallback'
            '-sendPushInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '+push':
                exclude: true
            '+sendPushMessageToChannel:withMessage:error:':
                name: sendMessage
                throws: NSErrorException
            '+sendPushMessageToChannelInBackground:withMessage:':
                name: sendMessageInBackground
                return_type: BFTask<Void>
            '+sendPushMessageToChannelInBackground:withMessage:target:selector:':
                exclude: true # deprecated
            '+sendPushMessageToChannelInBackground:.*':
                name: sendMessageInBackground
                parameters:
                    block:
                        type: '@Block PFSendCallback'
            '+sendPushMessageToQuery:withMessage:error:':
                name: sendMessage
                throws: NSErrorException
                parameters:
                    query:
                        type: PFQuery<PFInstallation>
            '+sendPushMessageToQueryInBackground:withMessage:':
                name: sendMessageInBackground
                return_type: BFTask<Void>
            '+sendPushMessageToQueryInBackground.*':
                name: sendMessageInBackground
                parameters:
                    query:
                        type: PFQuery<PFInstallation>
                    block:
                        type: '@Block PFSendCallback'
            '+sendPushDataToChannel:withData:error:':
                name: sendData
                throws: NSErrorException
            '+sendPushDataToChannelInBackground:withData:':
                name: sendDataInBackground
                return_type: BFTask<Void>
            '+sendPushDataToChannelInBackground:withData:target:selector:':
                exclude: true # deprecated
            '+sendPushDataToChannelInBackground.*':
                name: sendDataInBackground
                parameters:
                    block:
                        type: '@Block PFSendCallback'
            '+sendPushDataToQuery:withData:error:':
                name: sendData
                throws: NSErrorException
                parameters:
                    query:
                        type: PFQuery<PFInstallation>
            '+sendPushDataToQueryInBackground:withData:':
                name: sendDataInBackground
                return_type: BFTask<Void>
            '+sendPushDataToQueryInBackground.*':
                name: sendDataInBackground
                parameters:
                    query:
                        type: PFQuery<PFInstallation>
                    block:
                        type: '@Block PFSendCallback'
            '+handlePush:':
                name: handle
                parameters:
                    userInfo:
                        type: UIRemoteNotification
            '+storeDeviceToken:':
                trim_after_first_colon: true
            '+getSubscribedChannels:':
                trim_after_first_colon: true
                return_type: Set<String>
                return_marshaler: NSSet.AsStringSetMarshaler
                throws: NSErrorException
            '+getSubscribedChannelsInBackgroundWithBlock:':
                name: getSubscribedChannelsInBackground0
                visibility: protected
            '+getSubscribedChannelsInBackground':
                return_type: BFTask<NSSet<NSString>>
            '+getSubscribedChannelsInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '+getSubscribedChannelsInBackground.*':
                name: getSubscribedChannelsInBackground
            '+subscribeToChannel:error:':
                name: subscribe
                throws: NSErrorException
            '+subscribeToChannelInBackground:':
                name: subscribeInBackground
                return_type: BFTask<Void>
            '+subscribeToChannelInBackground:target:selector:':
                exclude: true # deprecated
            '+subscribeToChannelInBackground:.*':
                name: subscribeInBackground
            '+unsubscribeFromChannel:error:':
                name: unsubscribe
                throws: NSErrorException
            '+unsubscribeFromChannelInBackground:':
                name: unsubscribeInBackground
                return_type: BFTask<Void>
            '+unsubscribeFromChannelInBackground:target:selector:':
                exclude: true # deprecated
            '+unsubscribeFromChannelInBackground:.*':
                name: unsubscribeInBackground
            '-setPushToAndroid:':
                exclude: true # deprecated
            '-setPushToIOS:':
                exclude: true # deprecated
    PFQuery: # DONE
        methods:
            '-initWithClassName:':
                name: init
            '-includeKey:':
                name: include
                return_type: PFQuery<T>
            '-includeKeys:':
                name: include
                return_type: PFQuery<T>
                parameters:
                    keys:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-selectKeys:':
                name: selectKeys
                return_type: PFQuery<T>
                parameters:
                    keys:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '-whereKeyExists:':
                name: whereExists
                return_type: PFQuery<T>
            '-whereKeyDoesNotExist:':
                name: whereDoesNotExist
                return_type: PFQuery<T>
            '-whereKey:equalTo:':
                name: whereEqualTo
                return_type: PFQuery<T>
            '-whereKey:lessThan:':
                name: whereLessThan
                return_type: PFQuery<T>
            '-whereKey:lessThanOrEqualTo:':
                name: whereLessThanOrEqualTo
                return_type: PFQuery<T>
            '-whereKey:greaterThan:':
                name: whereGreaterThan
                return_type: PFQuery<T>
            '-whereKey:greaterThanOrEqualTo:':
                name: whereGreaterThanOrEqualTo
                return_type: PFQuery<T>
            '-whereKey:notEqualTo:':
                name: whereNotEqualTo
                return_type: PFQuery<T>
            '-whereKey:containedIn:':
                name: whereContainedIn
                return_type: PFQuery<T>
            '-whereKey:notContainedIn:':
                name: whereNotContainedIn
                return_type: PFQuery<T>
            '-whereKey:containsAllObjectsInArray:':
                name: whereContainsAll
                return_type: PFQuery<T>
            '-whereKey:nearGeoPoint:':
                name: whereNear
                return_type: PFQuery<T>
            '-whereKey:nearGeoPoint:withinMiles:':
                name: whereWithinMiles
                return_type: PFQuery<T>
            '-whereKey:nearGeoPoint:withinKilometers:':
                name: whereWithinKilometers
                return_type: PFQuery<T>
            '-whereKey:nearGeoPoint:withinRadians:':
                name: whereWithinRadians
                return_type: PFQuery<T>
            '-whereKey:withinGeoBoxFromSouthwest:toNortheast:':
                name: whereWithinGeoBox
                return_type: PFQuery<T>
            '-whereKey:matchesRegex.*':
                name: whereMatches
                return_type: PFQuery<T>
            '-whereKey:containsString:':
                name: whereContains
                return_type: PFQuery<T>
            '-whereKey:hasPrefix:':
                name: whereStartsWith
                return_type: PFQuery<T>
            '-whereKey:hasSuffix:':
                name: whereEndsWith
                return_type: PFQuery<T>
            '-whereKey:matchesKey:inQuery:':
                name: whereMatchesKeyInQuery
                return_type: PFQuery<T>
                parameters:
                    query:
                        type: PFQuery<?>
            '-whereKey:doesNotMatchKey:inQuery:':
                name: whereDoesNotMatchKeyInQuery
                return_type: PFQuery<T>
                parameters:
                    query:
                        type: PFQuery<?>
            '-whereKey:matchesQuery:':
                name: whereMatchesQuery
                return_type: PFQuery<T>
                parameters:
                    query:
                        type: PFQuery<?>
            '-whereKey:doesNotMatchQuery:':
                name: whereDoesNotMatchQuery
                return_type: PFQuery<T>
                parameters:
                    query:
                        type: PFQuery<?>
            '-(orderByAscending|addAscendingOrder|orderByDescending|addDescendingOrder):':
                trim_after_first_colon: true
                return_type: PFQuery<T>
            '-orderBySortDescriptor:':
                trim_after_first_colon: true
                return_type: PFQuery<T>
            '-orderBySortDescriptors:':
                trim_after_first_colon: true
                return_type: PFQuery<T>
                parameters:
                    sortDescriptors:
                        type: NSArray<NSSortDescriptor>
            '-getObjectWithId:':
                exclude: true
            '-getObjectWithId:error:':
                name: get
                return_type: T
                throws: NSErrorException
            '-getObjectInBackgroundWithId:':
                name: getInBackground
                return_type: BFTask<T>
            '-getObjectInBackgroundWithId:block:':
                name: getInBackground0
                visibility: protected # generic block
                parameters:
                    block:
                        type: '@Block PFGetCallback<PFObject>'
            '-getObjectInBackgroundWithId:target:selector:':
                exclude: true # deprecated
            '-getObjectInBackgroundWithId.*':
                name: getInBackground
            '-findObjects':
                exclude: true
            '-findObjects:':
                name: find
                return_type: NSArray<T>
                throws: NSErrorException
            '-findObjectsInBackground':
                name: findInBackground
                return_type: BFTask<NSArray<T>>
            '-findObjectsInBackgroundWithBlock:':
                name: findInBackground0
                visibility: protected # generic block
                parameters:
                    block:
                        type: '@Block PFFindCallback<PFObject>'
            '-findObjectsInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-findObjectsInBackground.*':
                name: findInBackground
            '-getFirstObject':
                exclude: true
            '-getFirstObject:':
                name: getFirst
                return_type: T
                throws: NSErrorException
            '-getFirstObjectInBackground':
                name: getFirstInBackground
                return_type: BFTask<T>
            '-getFirstObjectInBackgroundWithBlock:':
                name: getFirstInBackground0
                visibility: protected # generic block
                parameters:
                    block:
                        type: '@Block PFGetCallback<PFObject>'
            '-getFirstObjectInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-getFirstObjectInBackgroundWith.*':
                name: getFirstInBackground
            '-countObjects':
                exclude: true
            '-countObjects:':
                name: count
                throws: NSErrorException
            '-countObjectsInBackground':
                name: countInBackground
                return_type: BFTask<NSNumber>
            '-countObjectsInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-countObjectsInBackground.*':
                name: countInBackground
            '-fromPinWithName:':
                name: fromPin
                return_type: PFQuery<T>
            '-from.*':
                return_type: PFQuery<T>
            '-ignoreACLs':
                return_type: PFQuery<T>
            '+queryWithClassName.*':
                name: getQuery
                return_type: '<T extends PFObject> PFQuery<T>'
            '+orQueryWithSubqueries:':
                name: or
                return_type: '<T extends PFObject> PFQuery<T>'
                parameters:
                    queries:
                        type: NSArray<PFQuery<?>>
            '+getObjectOfClass:objectId:':
                exclude: true
            '+getObjectOfClass:objectId:error:':
                name: get
                return_type: '<T extends PFObject> T'
                throws: NSErrorException
            '+getUserObjectWithId:':
                exclude: true
            '+getUserObjectWithId:error:':
                name: getUser
                throws: NSErrorException
            '+queryForUser':
                exclude: true # deprecated
    PFRelation: # DONE
        methods:
            '-query':
                property: true
                return_type: PFQuery<T>
            '-addObject:':
                name: add
                parameters:
                    object:
                        type: T
            '-removeObject:':
                name: remove
                parameters:
                    object:
                        type: T
    PFRole: # DONE
        properties:
            'users':
                type: PFRelation<PFUser>
            'roles':
                type: PFRelation<PFRole>
        methods:
            '-init.*':
                name: init
            '+roleWithName.*':
                exclude: true
    PFSession: # DONE
        methods:
            '+getCurrentSessionInBackground':
                return_type: BFTask<PFSession>
            '+getCurrentSessionInBackgroundWithBlock:':
                name: getCurrentSessionInBackground
    PFUser: # DONE
        methods:
            '-signUp':
                exclude: true
            '-signUp:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-signUpInBackground':
                return_type: BFTask<Void>
            '-signUpInBackgroundWithBlock:':
                name: signUpInBackground
                parameters:
                    block:
                        type: '@Block PFSignUpCallback'
            '-signUpInBackgroundWithTarget:selector:':
                exclude: true # deprecated
            '-signUpInBackgroundWith.*':
                name: signUpInBackground
            '-linkWithAuthTypeInBackground:authData:':
                name: linkWithInBackground
                return_type: BFTask<Void>
                parameters:
                    authData:
                        type: 'NSDictionary<NSString, NSString>'
            '-unlinkWithAuthTypeInBackground:':
                name: unlinkFromInBackground
                return_type: BFTask<Void>
            '-isLinkedWithAuthType:':
                name: isLinked
            '+currentUser':
                property: true
            '+user':
                exclude: true
            '+logInWithUsername:password:':
                exclude: true
            '+logInWithUsername:password:error:':
                name: logIn
                throws: NSErrorException
            '+logInWithUsernameInBackground:password:':
                name: logInInBackground
                return_type: BFTask<PFUser>
            '+logInWithUsernameInBackground:password:target:selector:':
                exclude: true # deprecated
            '+logInWithUsernameInBackground.*':
                name: logInInBackground
            '+become:':
                exclude: true
            '+become:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '+becomeInBackground:':
                trim_after_first_colon: true
                return_type: BFTask<PFUser>
            '+becomeInBackground:target:selector:':
                exclude: true # deprecated
            '+becomeInBackground.*':
                trim_after_first_colon: true
            '+enableRevocableSessionInBackground':
                return_type: BFTask<Void>
            '+enableRevocableSessionInBackgroundWithBlock:':
                name: enableRevocableSessionInBackground
            '+logOutInBackground':
                return_type: BFTask<Void>
            '+logOutInBackgroundWithBlock:':
                name: logOutInBackground
            '+requestPasswordResetForEmail:':
                exclude: true
            '+requestPasswordResetForEmail:error:':
                name: requestPasswordReset
                throws: NSErrorException
            '+requestPasswordResetForEmailInBackground:':
                name: requestPasswordResetInBackground
                return_type: BFTask<Void>
            '+requestPasswordResetForEmailInBackground:block:':
                name: requestPasswordResetInBackground
                parameters:
                    block:
                        type: '@Block PFRequestPasswordResetCallback'
            '+requestPasswordResetForEmailInBackground:target:selector:':
                exclude: true # deprecated
            '+requestPasswordResetForEmailInBackground.*':
                name: requestPasswordResetInBackground
            '+registerAuthenticationDelegate:forAuthType:':
                name: registerAuthenticationCallback0
                visibility: private # reorder parameters
            '+logInWithAuthTypeInBackground:authData:':
                name: logInWithInBackground
                return_type: BFTask<PFUser>
                parameters:
                    authData:
                        type: 'NSDictionary<NSString, NSString>'
  
protocols:
    ParseMutableClientConfiguration: # DONE
        skip_adapter: true
    # PFSubclassing  # ignore
    PFUserAuthenticationDelegate: # DONE
        methods:
            '-restoreAuthenticationWithAuthData:':
                name: restoreAuthentication
                parameters:
                    authData:
                        type: 'NSDictionary<NSString, NSString>'

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?PF.*):
        class: ParseGlobals
        name: 'Function__#{g[0]}'

values:
    PFParseErrorDomain:
        class: PFError
        name: getClassDomain

    # PFObject
    PFObject(DefaultPin):
        class: PFObject
        name: 'get#{g[0]}'

    # Parse
    PFNetwork(.*Notification):
        class: Parse
        name: '#{g[0]}'
        type: NSString
    PFNetwork(.*UserInfoKey):
        class: Parse
        name: '#{g[0]}'
        type: NSString
        visibility: protected

    kPFDeviceType:
        exclude: true
    kPFParseServer:
        exclude: true

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?PF.*):
        class: ParseGlobals
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?PF.*):
        class: ParseGlobals
        name: 'Constant__#{g[0]}'
