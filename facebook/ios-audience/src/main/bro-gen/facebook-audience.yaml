package: org.robovm.pods.facebook.audience
framework: FBAudienceNetwork
include: [foundation, uikit, coregraphics, coremedia, dispatch]
clang_args: ['-x', 'objective-c']
headers: [FBAudienceNetwork.h]
typedefs:
    'void (^)(UIImage * _Nullable)': '@Block VoidBlock1<UIImage>'
    'UIView * _Nonnull (^)(FBNativeAd * _Nonnull, NSUInteger)': '@Block("(,@MachineSizedUInt)") Block2<FBNativeAd, Long, UIView>'
    OS_dispatch_queue: DispatchQueue

enums:
    FBAdLogLevel: {}
    FBNativeAdsCachePolicy: {}
    FBNativeAdViewType: {}
    FBNativeAdViewTag: {}
    FBMediaViewRenderingMethod: {}
    FBAdTestAdType: {}
    FBAdFormatType: {}
    FBNativeBannerAdViewType: {}

classes:
    FBAdChoicesView: # DONE
        methods:
            '-init.*':
                name: init
            '-updateFrameFromSuperview:':
                trim_after_first_colon: true
            '-updateFrameFromSuperview:insets:':
                trim_after_first_colon: true
    FBAdSettings: # DONE
        methods:
            '+addTestDevice:':
                trim_after_first_colon: true
            '+addTestDevices:':
                trim_after_first_colon: true
                parameters:
                    devicesHash:
                        type: List<String>
                        marshaler: NSArray.AsStringListMarshaler
            '+urlPrefix':
                property: true
    FBAdCustomSize: # DONE
        methods:
            '+customSize:':
                name: create
                constructor: true
    FBAdSize: {} # DONE
    FBAdView: # DONE
        methods:
            '-initWithPlacementID:adSize:rootViewController:':
                name: init
            '-loadAdWithBidPayload:':
                name: loadAd
    FBInterstitialAd: # DONE
        methods:
            '-initWithPlacementID:':
                name: init
            '-showAdFromRootViewController:':
                name: showAd
            '-loadAdWithBidPayload:':
                name: loadAd
    FBMediaView: # DONE
        methods:
            '-initWithNativeAd:':
                name: init
    FBNativeAd: # DONE
        methods:
            '-initWithPlacementID:':
                name: init
            '-registerViewForInteraction:withViewController:':
                trim_after_first_colon: true
            '-registerViewForInteraction:withViewController:withClickableViews:':
                trim_after_first_colon: true
                parameters:
                    clickableViews:
                        type: NSArray<UIView>
            '-registerViewForInteraction:mediaView:iconView:viewController:':
                name: registerView
            '-registerViewForInteraction:mediaView:iconView:viewController:clickableViews:':
                name: registerView
            '-registerViewForInteraction:mediaView:iconImageView:viewController:':
                name: registerView
            '-registerViewForInteraction:mediaView:iconImageView:viewController:clickableViews:':
                name: registerView
    FBAdImage: # DONE
        methods:
            '-initWithURL:width:height:':
                name: init
            '-loadImageAsyncWithBlock:':
                name: loadImageAsync
    FBNativeAdCollectionViewAdProvider: # DONE
        methods:
            '-initWithManager:':
                name: init
            '-collectionView:nativeAdForRowAtIndexPath:':
                name: getNativeAdForRow
            '-isAdCellAtIndexPath:forStride:':
                name: isAdCell
            '-adjustNonAdCellIndexPath:forStride:':
                name: adjustNonAdCell
            '-adjustCount:forStride:':
                name: adjustCount
    FBNativeAdCollectionViewCellProvider: # DONE
        methods:
            '-init.*':
                name: init
            '-collectionView:cellForItemAtIndexPath:':
                name: getCellForItem
            '-collectionView:heightForRowAtIndexPath:':
                name: getHeightForRow
    FBNativeAdScrollView: # DONE
        methods:
            '-init.*':
                name: init
    FBNativeAdsManager: # DONE
        methods:
            '-initWithPlacementID:forNumAdsRequested:':
                name: init
    FBNativeAdTableViewAdProvider: # DONE
        methods:
            '-initWithManager:':
                name: init
            '-tableView:nativeAdForRowAtIndexPath:':
                name: getNativeAdForRow
            '-isAdCellAtIndexPath:forStride:':
                trim_after_first_colon: true
            '-adjustNonAdCellIndexPath:forStride:':
                trim_after_first_colon: true
            '-adjustCount:forStride:':
                trim_after_first_colon: true
    FBNativeAdTableViewCellProvider: # DONE
        methods:
            '-initWithManager:forType:':
                name: init
            '-initWithManager:forType:forAttributes:':
                name: init
            '-tableView:cellForRowAtIndexPath:':
                name: getCellForRow
            '-tableView:heightForRowAtIndexPath:':
                name: getHeightForRow
            '-tableView:estimatedHeightForRowAtIndexPath:':
                name: getEstimatedHeightForRow
    FBNativeAdView: # DONE
        methods:
            '+nativeAdViewWith.*':
                name: create
                constructor: true
    FBNativeAdViewAttributes: # DONE
        methods:
            '-initWithDictionary:':
                name: init
            '+defaultAttributesForType:':
                name: getDefaultAttributes
    FBAdExtraHint:
        skip_def_constructor: true
        methods:
            '-initWithKeywords:':
                constructor: true
                name: init
    FBAdIconView: {}
    FBAdOptionsView: {}
    FBInstreamAdView:
        skip_def_constructor: true
        methods:
            '-initWithPlacementID:':
                name: init
                constructor: true
            '-loadAdWithBidPayload:':
                name: loadAd
    FBMediaViewVideoRenderer:
        methods:
            '-addPeriodicTimeObserverForInterval:queue:usingBlock:':
                name: addPeriodicTimeObserver
            '-videoDidFailWithError:':
                name: didFail
    FBNativeAdBase:
        methods:
            '-loadAdWithMediaCachePolicy:':
                name: loadAd
            '-loadAdWithBidPayload:':
                name: loadAd
            '-loadAdWithBidPayload:mediaCachePolicy:':
                name: loadAd
    FBNativeAdBaseView: {}
    FBNativeBannerAd:
        methods:
            '-initWithPlacementID:':
                name: init
                constructor: true
            '-registerViewForInteraction:iconView:viewController:':
                name: registerView
            '-registerViewForInteraction:iconView:viewController:clickableViews:':
                name: registerView
    FBNativeBannerAdView:
        methods:
            '+nativeBannerAdViewWithNativeBannerAd:withType:':
                name: createNativeBannerAdView
            '+nativeBannerAdViewWithNativeBannerAd:withType:withAttributes:':
                name: createNativeBannerAdView
    FBRewardedVideoAd:
        methods:
            '-initWithPlacementID:':
                name: init
                constructor: true
            '-initWithPlacementID:withUserID:withCurrency:':
                name: init
                constructor: true
            '-loadAdWithBidPayload:':
                name: loadAd
            '-setRewardDataWithUserID:withCurrency:':
                name: setRewardData
            '-showAdFromRootViewController:animated:':
                name: showAd

protocols:
    FBAdViewDelegate: # DONE
        methods:
            '-adViewDidClick:':
                name: didClick
            '-adViewDidFinishHandlingClick:':
                name: didFinishHandlingClick
            '-adViewDidLoad:':
                name: didLoad
            '-adView:didFailWithError:':
                name: didFail
            '-adViewWillLogImpression:':
                name: willLogImpression
    FBInterstitialAdDelegate: # DONE
        methods:
            '-interstitialAdDidClick:':
                name: didClick
            '-interstitialAdDidClose:':
                name: didClose
            '-interstitialAdWillClose:':
                name: willClose
            '-interstitialAdDidLoad:':
                name: didLoad
            '-interstitialAd:didFailWithError:':
                name: didFail
            '-interstitialAdWillLogImpression:':
                name: willLogImpression
    FBMediaViewDelegate: # DONE
        methods:
            '-mediaViewDidLoad:':
                name: didLoad
            '-mediaView:videoVolumeDidChange:':
                name: volumeDidChange
    FBNativeAdDelegate: # DONE
        methods:
            '-nativeAdDidLoad:':
                name: didLoad
            '-nativeAdWillLogImpression:':
                name: willLogImpression
            '-nativeAd:didFailWithError:':
                name: didFail
            '-nativeAdDidClick:':
                name: didClick
            '-nativeAdDidFinishHandlingClick:':
                name: didFinishHandlingClick
    FBNativeAdsManagerDelegate: # DONE
        methods:
            '-nativeAdsFailedToLoadWithError:':
                name: nativeAdsFailedToLoad
    FBAdLoggingDelegate:
        methods:
            '-logAtLevel:withFileName:withLineNumber:withThreadId:withBody:':
                name: log
    FBInstreamAdViewDelegate:
        methods:
            '-adView:didFailWithError:':
                name: didFail
    FBNativeBannerAdDelegate:
        methods:
            '-nativeBannerAd:didFailWithError:':
                name: didFail
    FBRewardedVideoAdDelegate:
        methods:
            '-rewardedVideoAd:didFailWithError:':
                name: didFail

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?FB.*):
        class: FacebookAudienceNetwork
        name: 'Function__#{g[0]}'

values:
    FBAudienceNetworkErrorDomain:
        class: FBAudienceNetworkError
        name: getClassDomain

    kFBAdSize(320x50):
        class: FBAdSize
        name: '_#{g[0]}'
    kFBAdSize(.*):
        class: FBAdSize
        name: '#{g[0]}'
    FBAdStarRating:
        exclude: true

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?FB.*):
        class: FacebookAudienceNetwork
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?FB.*):
        class: FacebookAudienceNetwork
        name: 'Constant__#{g[0]}'
