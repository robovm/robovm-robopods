package: org.robovm.pods.bolts
framework: Bolts
include: [foundation, uikit, dispatch, coregraphics]
clang_args: ['-x', 'objective-c']
headers: [Bolts.h]
typedefs:
    BFContinuationBlock: '@Block BFContinuation<NSObject, NSObject>'
private_typedefs:
    'void (^)(void (^ _Nonnull)())': '@Block("(@Block)") VoidBlock1<Runnable>'
    'id  _Nonnull (^)()': '@Block Block0<NSObject>'
    BFGenericType: NSObject
    ResultType: NSObject
    
enums:
    BFAppLinkNavigationType: {}
    BFIncludeStatusBarInSize: {}
        
classes:
    BFTaskError:
        extends: NSError

    Bolts: # DONE
        methods:
            '+version':
                property: true
    BFAppLink: # DONE
        properties:
            'targets':
                type: NSArray<BFAppLinkTarget>
        methods:
            '+appLinkWithSourceURL:targets:webURL:':
                name: create
                constructor: true
                parameters:
                    targets:
                        type: NSArray<BFAppLinkTarget>
    BFAppLinkNavigation: # DONE
        properties:
            'extras':
                type: 'NSDictionary<NSString, NSObject>'
            'appLinkData':
                type: 'NSDictionary<NSString, NSObject>'
        methods:
            '-navigate:':
                trim_after_first_colon: true
                throws: NSErrorException
            '-navigationType':
                property: true
            '+callbackAppLinkDataForAppWithName:url:':
                name: getCallbackAppLinkData
            '+navigationWithAppLink:extras:appLinkData:':
                name: create
                constructor: true
                parameters:
                    extras:
                        type: 'NSDictionary<NSString, NSObject>'
                    appLinkData:
                        type: 'NSDictionary<NSString, NSObject>'
            '+navigationTypeForLink:':
                name: getNavigationTypeForLink
            '+resolveAppLinkInBackground:.*':
                trim_after_first_colon: true
            '+navigateToAppLink:error:':
                trim_after_first_colon: true
                throws: NSErrorException
            '+navigateToURLInBackground:.*':
                trim_after_first_colon: true
            '+defaultResolver':
                property: true
    BFAppLinkReturnToRefererController: # DONE
        methods:
            '-initForDisplayAboveNavController:':
                name: init
            '-showView.*':
                name: showView
            '-closeViewAnimated:':
                name: closeView
    BFAppLinkReturnToRefererView: {} # DONE
    BFAppLinkTarget: # DONE
        methods:
            '+appLinkTargetWithURL:appStoreId:appName:':
                name: create
                constructor: true
    BFCancellationToken: # DONE
        methods:
            '-registerCancellationObserverWithBlock:':
                name: registerCancellationObserver
    BFCancellationTokenRegistration: # DONE
        methods:
            '-dispose':
                name: destroy
    BFCancellationTokenSource: # DONE
        methods:
            '-cancelAfterDelay:':
                name: cancel
                parameters:
                    millis:
                        name: delay
            '-dispose':
                name: destroy
            '+cancellationTokenSource':
                exclude: true
    BFExecutor: # DONE
        methods:
            '-execute:':
                trim_after_first_colon: true
            '+(defaultExecutor|immediateExecutor|mainThreadExecutor)':
                property: true
            '+executorWith.*':
                name: create
                constructor: true
    BFMeasurementEvent: {} # DONE
    BFTask: # DONE
        properties:
            'result':
                name: result0
                visibility: protected # generic type
            'cancelled':
                getter: isCancelled
        methods:
            '-continue.*uccessBlock:.*':
                name: continueOnSuccess0
                return_type: '<TContinuationResult> BFTask<TContinuationResult>'
                visibility: protected # generic block
            '-continue.*lock:.*':
                name: continueWith0
                return_type: '<TContinuationResult> BFTask<TContinuationResult>'
                visibility: protected # generic block
            '+taskWithDelay.*':
                name: createWithDelay
                return_type: BFTask<Void>
            '+taskWith(.*):':
                name: 'createFor#{g[0]}'
                return_type: '<T> BFTask<T>'
                visibility: protected # generic type
            '+cancelledTask':
                name: createCancelled
                return_type: '<T> BFTask<T>'
            '+taskForCompletionOfAllTasks:':
                name: createForCompletionOfAllTasks
                return_type: '<T> BFTask<Void>'
                parameters:
                    tasks:
                        type: NSArray<BFTask<T>>
            '+taskForCompletionOfAnyTask:':
                name: createForCompletionOfAnyTasks
                return_type: '<T> BFTask<Void>'
                parameters:
                    tasks:
                        type: NSArray<BFTask<T>>
            '+taskForCompletionOfAllTasksWithResults:':
                name: createForCompletionOfAllTasksWithResults
                return_type: '<T extends NSObject> BFTask<NSArray<T>>'
                parameters:
                    tasks:
                        type: NSArray<BFTask<T>>
            '+taskFromExecutor:withBlock:':
                name: create0
                return_type: '<T> BFTask<T>'
                visibility: protected # generic block
    BFTaskCompletionSource: # DONE
        properties:
            'task':
                type: BFTask<?>
        methods:
            '-trySet.*':
                trim_after_first_colon: true
            '+taskCompletionSource':
                exclude: true
    BFURL: # DONE
        properties:
            'targetQueryParameters':
                type: 'NSDictionary<NSString, NSObject>'
            'appLinkData':
                type: 'NSDictionary<NSString, NSObject>'
            'appLinkExtras':
                type: 'NSDictionary<NSString, NSObject>'
            'inputQueryParameters':
                type: 'NSDictionary<NSString, NSObject>'
        methods:
            '+URLWith.*':
                name: create
                constructor: true
    BFWebViewAppLinkResolver: # DONE
        methods:
            '+sharedInstance':
                property: true
    BFMeasurementEvent: {}

protocols:
    BFAppLinkResolving: # DONE
        skip_adapter: true
        methods:
            '-appLinkFromURLInBackground:':
                name: getAppLinkFromURLInBackground
                return_type: BFTask<BFAppLink>
    BFAppLinkReturnToRefererControllerDelegate: # DONE
        methods:
            '-returnToRefererController:willNavigateToAppLink:':
                name: willNavigateToAppLink
            '-returnToRefererController:didNavigateToAppLink:type:':
                name: didNavigateToAppLink
    BFAppLinkReturnToRefererViewDelegate: # DONE
        methods:
            '-returnToRefererViewDidTapInsideCloseButton:':
                name: didTapInsideCloseButton
            '-returnToRefererViewDidTapInsideLink:link:':
                name: didTapInsideLink

functions:
    # Make sure we don't miss any functions if new ones are introduced in a later version
    (k?BF.*):
        class: Bolts
        name: 'Function__#{g[0]}'

values:
    BFTaskErrorDomain:
        class: BFTaskError
        name: getClassDomain
    BFTaskMultipleExceptions.*:
        exclude: true
    BFMultipleErrors.*:
        exclude: true

    # BFAppLink
    BFAppLinkVersion:
        class: BFAppLink
        name: getVersion

    # BFMeasurementEvent
    BFAppLink(.*)EventName:
        enum: BFAppLinkEventName
        name: '#{g[0]}'
        type: NSString
    BFMeasurementEventNotificationName:
        class: BFMeasurementEvent
        name: EventNotification
        type: NSString
    BFMeasurement(Event.*)Key:
        dictionary: BFMeasurementEventNotification
        name: '#{g[0]}'
        type: NSString
        methods:
            EventName:
                type: BFAppLinkEventName
            EventArgs:
                type: 'NSDictionary<NSString, NSObject>'

    # Make sure we don't miss any values if new ones are introduced in a later version
    (k?BF.*):
        class: Bolts
        name: 'Value__#{g[0]}'

constants:
    # Make sure we don't miss any constants if new ones are introduced in a later version
    (k?BF.*):
        class: Bolts
        name: 'Constant__#{g[0]}'
